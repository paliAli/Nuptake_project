# Calculate R-squared on the original scale
y_actual <- Nuptake_NDRE$mean_Nuptake
y_predicted <- exp(predictions)
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_NDRE$mean_Nuptake - results_NDRE$Predicted)^2))
Nuptake_NDRE_prediction <- results_NDRE %>%
ggplot(aes(x = Actual, y = Predicted)) +
geom_point(size = 3, ) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Actual", y = "Predicted", title = "NDRE Actual vs. Predicted Values") +
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
plot.title = element_text (margin = margin (b = 20), size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 13))+
annotate(
"text",
x = min(results_NDRE$Actual)+1,
y = max(results_NDRE$Predicted)-0.5,
label = paste(
"R² =", round(r_squared, 3),
"\nRMSE =", round(rmse, 3)
),
hjust = 0, vjust = 1, color = "black", size = 6
)
Nuptake_NDRE_prediction
ggsave("Nuptake_NDRE_prediction_no05-10-2022.png", Nuptake_NDRE_prediction, width = 7, height = 10, dpi = 350)
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(log(mean_Nuptake) ~ meanMCARI, data = Nuptake_MCARI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_MCARI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_MCARI <- data.frame(Actual = Nuptake_MCARI$mean_Nuptake, Predicted = exp(predictions))
# Calculate R-squared on the original scale
y_actual <- Nuptake_MCARI$mean_Nuptake
y_predicted <- exp(predictions)
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_MCARI$mean_Nuptake - results_MCARI$Predicted)^2))
Nuptake_MCARI_prediction <- results_MCARI %>%
ggplot(aes(x = Actual, y = Predicted)) +
geom_point(size = 3, ) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Actual", y = "Predicted", title = "MCARI Actual vs. Predicted Values") +
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
plot.title = element_text (margin = margin (b = 20), size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 13))+
annotate(
"text",
x = min(results_MCARI$Actual)+1,
y = max(results_MCARI$Predicted)-0.5,
label = paste(
"R² =", round(r_squared, 3),
"\nRMSE =", round(rmse, 3)
),
hjust = 0, vjust = 1, color = "black", size = 6
)
Nuptake_MCARI_prediction
ggsave("Nuptake_MCARI_prediction_no05-10-2022.png", Nuptake_MCARI_prediction, width = 7, height = 10, dpi = 350)
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(log(mean_Nuptake) ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = exp(predictions))
# Calculate R-squared on the original scale
y_actual <- Nuptake_EVI$mean_Nuptake
y_predicted <- exp(predictions)
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_EVI$mean_Nuptake - results_EVI$Predicted)^2))
Nuptake_EVI_prediction <- results_EVI %>%
ggplot(aes(x = Actual, y = Predicted)) +
geom_point(size = 3, ) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Actual", y = "Predicted", title = "EVI Actual vs. Predicted Values") +
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
plot.title = element_text (margin = margin (b = 20), size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 13))+
annotate(
"text",
x = min(results_EVI$Actual)+1,
y = max(results_EVI$Predicted)-0.5,
label = paste(
"R² =", round(r_squared, 3),
"\nRMSE =", round(rmse, 3)
),
hjust = 0, vjust = 1, color = "black", size = 6
)
Nuptake_EVI_prediction
ggsave("Nuptake_EVI_prediction_no05-10-2022.png", Nuptake_EVI_prediction, width = 7, height = 10, dpi = 350)
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(mean_Nuptake ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = predictions)
# Calculate R-squared on the original scale
y_actual <- Nuptake_EVI$mean_Nuptake
y_predicted <- exp(predictions)
y_predicted <- predictions
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_EVI$mean_Nuptake - results_EVI$Predicted)^2))
coefficients <- coef(LOOCV_model)
set.seed(123)
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(log(mean_Nuptake) ~ meanNDVI, data = Nuptake_NDVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_NDVI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_NDVI <- data.frame(Actual = Nuptake_NDVI$mean_Nuptake, Predicted = exp(predictions))
# Calculate R-squared on the original scale
y_actual <- Nuptake_NDVI$mean_Nuptake
y_predicted <- exp(predictions)
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
coefficients <- coef(LOOCV_model)
coefficients <- coef(LOOCV_model$finalModel)
print(coefficients)
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(mean_Nuptake ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
View(results_EVI)
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(log(mean_Nuptake) ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = exp(predictions))
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(mean_Nuptake ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(log(mean_Nuptake) ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
print(exp(predictions))
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = exp(predictions))
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = exp(predictions))
View(results_EVI)
# Calculate R-squared on the original scale
y_actual <- Nuptake_EVI$mean_Nuptake
y_predicted <- exp(predictions)
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_EVI$mean_Nuptake - results_EVI$Predicted)^2))
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(mean_Nuptake ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = predictions)
View(results_EVI)
# Calculate R-squared on the original scale
y_actual <- Nuptake_EVI$mean_Nuptake
y_predicted <- predictions
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_EVI$mean_Nuptake - results_EVI$Predicted)^2))
Nuptake_EVI_prediction <- results_EVI %>%
ggplot(aes(x = Actual, y = Predicted)) +
geom_point(size = 3, ) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Actual", y = "Predicted", title = "EVI Actual vs. Predicted Values") +
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
plot.title = element_text (margin = margin (b = 20), size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 13))+
annotate(
"text",
x = min(results_EVI$Actual)+1,
y = max(results_EVI$Predicted)-0.5,
label = paste(
"R² =", round(r_squared, 3),
"\nRMSE =", round(rmse, 3)
),
hjust = 0, vjust = 1, color = "black", size = 6
)
Nuptake_EVI_prediction
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(log(mean_Nuptake) ~ meanNDRE, data = Nuptake_NDRE, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_NDRE, type = "raw")
print(exp(predictions))
View(results_NDRE)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_NDRE <- data.frame(Actual = Nuptake_NDRE$mean_Nuptake, Predicted = exp(predictions))
# Calculate R-squared on the original scale
y_actual <- Nuptake_NDRE$mean_Nuptake
y_predicted <- exp(predictions)
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_NDRE$mean_Nuptake - results_NDRE$Predicted)^2))
#linear relationship
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(mean_Nuptake ~ meanNDRE, data = Nuptake_NDRE, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_NDRE, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_NDRE <- data.frame(Actual = Nuptake_NDRE$mean_Nuptake, Predicted = predictions)
# Calculate R-squared on the original scale
y_actual <- Nuptake_NDRE$mean_Nuptake
y_predicted <- exp(predictions)
y_predicted <- predictions
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_NDRE$mean_Nuptake - results_NDRE$Predicted)^2))
Nuptake_NDRE_prediction <- results_NDRE %>%
ggplot(aes(x = Actual, y = Predicted)) +
geom_point(size = 3, ) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Actual", y = "Predicted", title = "NDRE Actual vs. Predicted Values") +
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
plot.title = element_text (margin = margin (b = 20), size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 13))+
annotate(
"text",
x = min(results_NDRE$Actual)+1,
y = max(results_NDRE$Predicted)-0.5,
label = paste(
"R² =", round(r_squared, 3),
"\nRMSE =", round(rmse, 3)
),
hjust = 0, vjust = 1, color = "black", size = 6
)
Nuptake_NDRE_prediction
load("~/GitHub/Nuptake_project/workspace(2).RData")
Nuptake_EVI <- fuzzy_inner_join(mean_Nuptake, EVI,
by = c("date" = "date"),
match_fun = function(x, y) abs(difftime(x, y, units = "days")) <= 7) %>%
mutate(date_difference = abs(difftime(date.x, date.y, units = "days")))%>%
arrange(date_difference, decreasing = FALSE)
Nuptake_EVI <- Nuptake_EVI [-11, ]
library(fuzzyjoin)
library(dplyr)
library(ggplot2)
library(ggthemes)
Nuptake_EVI <- fuzzy_inner_join(mean_Nuptake, EVI,
by = c("date" = "date"),
match_fun = function(x, y) abs(difftime(x, y, units = "days")) <= 7) %>%
mutate(date_difference = abs(difftime(date.x, date.y, units = "days")))%>%
arrange(date_difference, decreasing = FALSE)
Nuptake_EVI <- Nuptake_EVI [-11, ]
Nuptake_EVI <- Nuptake_EVI %>%
group_by(date.x)%>%
summarise(mean_Nuptake = first(mean_Nuptake), meanEVI = first(meanEVI), material = first(material.x))
linear_model <- lm(mean_Nuptake ~ meanEVI, data = Nuptake_EVI)
summary(linear_model)
linear_coef <- coef(linear_model)
intercept <- linear_coef[1]
slope <- linear_coef[2]
r_squared <- 1 - sum(residuals(linear_model)^2) / sum((Nuptake_EVI$mean_Nuptake - mean(Nuptake_EVI$mean_Nuptake))^2)
linear_Nuptake_EVI_plot <- Nuptake_EVI%>%
ggplot(aes(x = meanEVI, y = mean_Nuptake))+
geom_point(size =3, aes(shape = factor(material), color = factor(material)))+
geom_smooth(method = lm, se = FALSE)+
labs(x = "EVI", y = "N uptake (g/m2)")+
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
legend.text = element_text(size = 14),
legend.title = element_text(size = 15))+
annotate("text",
x = min(Nuptake_EVI$meanEVI) + 0.08,
y = max(Nuptake_EVI$mean_Nuptake) - 0.8,
label = paste("y =", format(slope, digits = 2),
"*x +",
format(intercept, digits = 2),
"\nR2 =", round(r_squared, 2),
"\nCorrelation:", round(cor(Nuptake_EVI$meanEVI, Nuptake_EVI$mean_Nuptake), 2)),
hjust = 0, vjust = 1, color = "black", size = 6)+
scale_shape_manual(values = c(16, 17)) +
scale_color_manual(values = c("green3", "gold2")) +
guides(shape = guide_legend(title = "Biomass type",
keywidth = 1.5),
color = guide_legend(title = "Biomass type"))
linear_Nuptake_EVI_plot
Nuptake_EVI <- fuzzy_inner_join(mean_Nuptake, EVI,
by = c("date" = "date"),
match_fun = function(x, y) abs(difftime(x, y, units = "days")) <= 7) %>%
mutate(date_difference = abs(difftime(date.x, date.y, units = "days")))%>%
arrange(date_difference, decreasing = FALSE)
Nuptake_EVI <- Nuptake_EVI [-11, ]
mean_Nuptake <- mean_Nuptake[which(mean_Nuptake$date <= "2023-06-01"),]
Nuptake_EVI <- fuzzy_inner_join(mean_Nuptake, EVI,
by = c("date" = "date"),
match_fun = function(x, y) abs(difftime(x, y, units = "days")) <= 7) %>%
mutate(date_difference = abs(difftime(date.x, date.y, units = "days")))%>%
arrange(date_difference, decreasing = FALSE)
Nuptake_EVI <- Nuptake_EVI [-11, ]
Nuptake_EVI <- Nuptake_EVI %>%
group_by(date.x)%>%
summarise(mean_Nuptake = first(mean_Nuptake), meanEVI = first(meanEVI), material = first(material.x))
linear_model <- lm(mean_Nuptake ~ meanEVI, data = Nuptake_EVI)
summary(linear_model)
linear_coef <- coef(linear_model)
intercept <- linear_coef[1]
slope <- linear_coef[2]
r_squared <- 1 - sum(residuals(linear_model)^2) / sum((Nuptake_EVI$mean_Nuptake - mean(Nuptake_EVI$mean_Nuptake))^2)
linear_Nuptake_EVI_plot <- Nuptake_EVI%>%
ggplot(aes(x = meanEVI, y = mean_Nuptake))+
geom_point(size =3, aes(shape = factor(material), color = factor(material)))+
geom_smooth(method = lm, se = FALSE)+
labs(x = "EVI", y = "N uptake (g/m2)")+
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
legend.text = element_text(size = 14),
legend.title = element_text(size = 15))+
annotate("text",
x = min(Nuptake_EVI$meanEVI) + 0.08,
y = max(Nuptake_EVI$mean_Nuptake) - 0.8,
label = paste("y =", format(slope, digits = 2),
"*x +",
format(intercept, digits = 2),
"\nR2 =", round(r_squared, 2),
"\nCorrelation:", round(cor(Nuptake_EVI$meanEVI, Nuptake_EVI$mean_Nuptake), 2)),
hjust = 0, vjust = 1, color = "black", size = 6)+
scale_shape_manual(values = c(16, 17)) +
scale_color_manual(values = c("green3", "gold2")) +
guides(shape = guide_legend(title = "Biomass type",
keywidth = 1.5),
color = guide_legend(title = "Biomass type"))
linear_Nuptake_EVI_plot
Nuptake_EVI <- fuzzy_inner_join(mean_Nuptake, EVI,
by = c("date" = "date"),
match_fun = function(x, y) abs(difftime(x, y, units = "days")) <= 7) %>%
mutate(date_difference = abs(difftime(date.x, date.y, units = "days")))%>%
arrange(date_difference, decreasing = FALSE)
mean_Nuptake <- mean_Nuptake[which(mean_Nuptake$date <= "2023-06-01"),]
Nuptake_EVI <- fuzzy_inner_join(mean_Nuptake, EVI,
by = c("date" = "date"),
match_fun = function(x, y) abs(difftime(x, y, units = "days")) <= 7) %>%
mutate(date_difference = abs(difftime(date.x, date.y, units = "days")))%>%
arrange(date_difference, decreasing = FALSE)
Nuptake_EVI <- Nuptake_EVI [-11, ]
View(Nuptake_EVI)
Nuptake_EVI <- Nuptake_EVI %>%
group_by(date.x)%>%
summarise(mean_Nuptake = first(mean_Nuptake), meanEVI = first(meanEVI), material = first(material.x))
Nuptake_EVI <- Nuptake_EVI %>%
group_by(date.x)%>%
summarise(mean_Nuptake = first(mean_Nuptake), meanEVI = first(meanEVI), material = first(material))
linear_model <- lm(mean_Nuptake ~ meanEVI, data = Nuptake_EVI)
summary(linear_model)
linear_coef <- coef(linear_model)
intercept <- linear_coef[1]
slope <- linear_coef[2]
r_squared <- 1 - sum(residuals(linear_model)^2) / sum((Nuptake_EVI$mean_Nuptake - mean(Nuptake_EVI$mean_Nuptake))^2)
linear_Nuptake_EVI_plot <- Nuptake_EVI%>%
ggplot(aes(x = meanEVI, y = mean_Nuptake))+
geom_point(size =3, aes(shape = factor(material), color = factor(material)))+
geom_smooth(method = lm, se = FALSE)+
labs(x = "EVI", y = "N uptake (g/m2)")+
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15),
legend.text = element_text(size = 14),
legend.title = element_text(size = 15))+
annotate("text",
x = min(Nuptake_EVI$meanEVI) + 0.08,
y = max(Nuptake_EVI$mean_Nuptake) - 0.8,
label = paste("y =", format(slope, digits = 2),
"*x +",
format(intercept, digits = 2),
"\nR2 =", round(r_squared, 2),
"\nCorrelation:", round(cor(Nuptake_EVI$meanEVI, Nuptake_EVI$mean_Nuptake), 2)),
hjust = 0, vjust = 1, color = "black", size = 6)+
scale_shape_manual(values = c(16, 17)) +
scale_color_manual(values = c("green3", "gold2")) +
guides(shape = guide_legend(title = "Biomass type",
keywidth = 1.5),
color = guide_legend(title = "Biomass type"))
linear_Nuptake_EVI_plot
#specify the cross-validation method
ctrl <- trainControl(method = "LOOCV")
library(caret)
set.seed(123)
#fit a regression model and use LOOCV to evaluate performance
LOOCV_model <- train(mean_Nuptake ~ meanEVI, data = Nuptake_EVI, method = "lm", trControl = ctrl)
LOOCV_model
# Predict using LOOCV model
predictions <- predict(LOOCV_model, newdata = Nuptake_EVI, type = "raw")
print(predictions)
# Create a data frame with actual and predicted values
#must do exp(predictions) to undo the logarithmic transformation and get true Nuptake values
results_EVI <- data.frame(Actual = Nuptake_EVI$mean_Nuptake, Predicted = predictions)
# Calculate R-squared on the original scale
y_actual <- Nuptake_EVI$mean_Nuptake
y_predicted <- predictions
ss_residual <- sum((y_actual - y_predicted)^2)
ss_total <- sum((y_actual - mean(y_actual))^2)
r_squared <- 1 - (ss_residual / ss_total)
# Calculate RMSE
rmse <- sqrt(mean((Nuptake_EVI$mean_Nuptake - results_EVI$Predicted)^2))
# Calculate MAE
mae <- MAE(y_predicted, y_actual)
# Scatter plot
library(ggplot2)
Nuptake_EVI_prediction <- results_EVI %>%
ggplot(aes(x = Actual, y = Predicted)) +
geom_point(size = 3, ) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Actual", y = "Predicted") +
theme_minimal()+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 20), size = 15),
axis.title.y = element_text(margin = margin(r = 20), size = 15))+
annotate(
"text",
x = min(results_EVI$Actual)+1,
y = max(results_EVI$Predicted)-0.5,
label = paste(
"R² =", round(r_squared, 2),
"\nRMSE =", round(rmse, 2),
"\nMAE =", round(mae, 2)
),
hjust = 0, vjust = 1, color = "black", size = 6
)
Nuptake_EVI_prediction
